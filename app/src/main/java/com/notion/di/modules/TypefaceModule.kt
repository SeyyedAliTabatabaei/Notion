package com.notion.di.modulesimport android.content.Contextimport android.graphics.Typefaceimport com.notion.di.qualifier.BlackTypefaceimport com.notion.di.qualifier.BoldTypefaceimport com.notion.di.qualifier.LightTypefaceimport com.notion.di.qualifier.RegularTypefaceimport com.notion.di.qualifier.SemiBoldTypefaceimport com.notion.utils.Constantsimport dagger.Moduleimport dagger.Providesimport dagger.hilt.InstallInimport dagger.hilt.android.qualifiers.ApplicationContextimport dagger.hilt.components.SingletonComponentimport javax.inject.Namedimport javax.inject.Singleton@Module@InstallIn(SingletonComponent::class)class TypefaceModule {    @Provides    @Named("yekan_regular")    @Singleton    fun provideTypeFaceRegularYekan(@ApplicationContext context: Context) : Typeface {        return Typeface.createFromAsset(context.assets, Constants.regularFontPath)    }    @Provides    @Named("yekan_light")    @Singleton    fun provideTypeFaceLightYekan(@ApplicationContext context: Context) : Typeface{        return Typeface.createFromAsset(context.assets , Constants.lightFontPath)    }    @Provides    @Named("yekan_bold")    @Singleton    fun provideTypeFaceBoldYekan(@ApplicationContext context: Context) : Typeface{        return Typeface.createFromAsset(context.assets , Constants.boldFontPath)    }    @Provides    @Named("yekan_semi_bold")    @Singleton    fun provideTypeFaceSemiBoldYekan(@ApplicationContext context: Context) : Typeface{        return Typeface.createFromAsset(context.assets , Constants.semiBoldFontPath)    }    @Provides    @Named("yekan_black")    @Singleton    fun provideTypeFaceBlackYekan(@ApplicationContext context: Context) : Typeface {        return Typeface.createFromAsset(context.assets , Constants.blackBoldFontPath)    }    @Provides    @LightTypeface    fun provideTypeFaceLight(@Named("yekan_light") typeface: Typeface) : Typeface{        return typeface    }    @Provides    @RegularTypeface    fun provideTypeFaceRegular(@Named("yekan_regular") typeface: Typeface) : Typeface{        return typeface    }    @Provides    @BoldTypeface    fun provideTypeFaceBold(@Named("yekan_bold") typeface: Typeface) : Typeface{        return typeface    }    @Provides    @SemiBoldTypeface    fun provideTypeFaceSemiBold(@Named("yekan_semi_bold") typeface: Typeface) : Typeface{        return typeface    }    @Provides    @BlackTypeface    fun provideTypeFaceBlack(@Named("yekan_black") typeface: Typeface) : Typeface{        return typeface    }}