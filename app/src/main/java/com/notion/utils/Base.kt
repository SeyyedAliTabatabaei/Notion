package com.notion.utilsimport android.content.Contextimport android.view.ViewGroupimport android.widget.Toastimport androidx.appcompat.app.AppCompatActivityimport androidx.appcompat.app.AppCompatDelegateimport androidx.coordinatorlayout.widget.CoordinatorLayoutimport androidx.core.view.childrenimport androidx.fragment.app.Fragmentimport androidx.lifecycle.ViewModelimport java.lang.IllegalStateExceptionabstract class NotionFragment : Fragment() , NotionView {    override val viewContext: Context?        get() = context    override val rootView: CoordinatorLayout?        get() = view as CoordinatorLayout}abstract class NotionActivity : AppCompatActivity() , NotionView {    override val viewContext: Context?        get() = this    override val rootView: CoordinatorLayout?        get() {            val viewGroup = window.decorView.findViewById<ViewGroup>(android.R.id.content) as ViewGroup            if (viewGroup !is CoordinatorLayout){                viewGroup.children.forEach {                    if (it is CoordinatorLayout)                        return it                }                throw IllegalStateException("RootView must be instance of CoordinatorLayout")            } else                return viewGroup        }}interface NotionView{    val rootView : CoordinatorLayout?    val viewContext : Context?    fun showToast(yourMessage : String , leghShow : Int = Toast.LENGTH_SHORT){        viewContext?.let {            Toast.makeText(it , yourMessage , leghShow).show()        }    }    fun changeThemeApp(isDarkMode : Boolean){        if (isDarkMode)            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES)        else            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)    }}abstract class NotionViewModel : ViewModel() {    override fun onCleared() {        super.onCleared()    }}