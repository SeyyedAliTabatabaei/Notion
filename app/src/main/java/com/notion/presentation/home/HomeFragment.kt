package com.notion.presentation.homeimport android.app.Dialogimport android.graphics.Colorimport android.graphics.drawable.ColorDrawableimport android.os.Bundleimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.ImageViewimport android.widget.RelativeLayoutimport android.widget.Toastimport androidx.core.content.ContextCompatimport androidx.fragment.app.viewModelsimport androidx.recyclerview.widget.LinearLayoutManagerimport androidx.recyclerview.widget.StaggeredGridLayoutManagerimport com.notion.Rimport com.notion.core.helper.DataStateimport com.notion.databinding.DialogRighGoalBindingimport com.notion.databinding.FragmentHomeBindingimport com.notion.utils.NotionFragmentimport dagger.hilt.android.AndroidEntryPoint@AndroidEntryPointclass HomeFragment : NotionFragment() {    private val TAG = "HomeFragment"    lateinit var binding : FragmentHomeBinding    val viewModel : HomeViewModel by viewModels()    val tagCheck = "Checked"    val tagUnCheck = "UnChecked"    override fun onCreateView(        inflater: LayoutInflater,        container: ViewGroup?,        savedInstanceState: Bundle?    ): View {        binding = FragmentHomeBinding.inflate(inflater ,container ,false)        return binding.root    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        initView()        initViewModel()    }    private fun initView() {        binding.rbHomeI1.tag = tagUnCheck        binding.rbHomeI2.tag = tagUnCheck        binding.rbHomeI3.tag = tagUnCheck        binding.rbHomeI1.setOnClickListener {            showDialogRichGoal()            checkItem(binding.rbHomeI1 , binding.ivHomeI1)        }        binding.rbHomeI2.setOnClickListener {            checkItem(binding.rbHomeI2 , binding.ivHomeI2)        }        binding.rbHomeI3.setOnClickListener {            checkItem(binding.rbHomeI3 , binding.ivHomeI3)        }    }    private fun checkItem(rbView : RelativeLayout , ivView : ImageView) {        if (rbView.tag == tagUnCheck) {            rbView.tag = tagCheck            ivView.setImageDrawable(requireContext().getDrawable(R.drawable.ic_checked))        }        else {            rbView.tag = tagUnCheck            ivView.setImageDrawable(requireContext().getDrawable(R.drawable.bg_radio_button))        }    }    private fun showDialogRichGoal() {        val dialog = Dialog(requireContext())        val dialogChangeGoalBinding = DialogRighGoalBinding.inflate(layoutInflater)        dialog.setContentView(dialogChangeGoalBinding.root)        dialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))        dialog.window?.setDimAmount(0.4f)        dialog.show()    }    private fun initViewModel() {        viewModel.getProductList()        viewModel.productListLiveData.observe(viewLifecycleOwner){            when(it){                is DataState.Loading -> {                    Log.i(TAG, "onViewCreated: is loading")                    // set loading seller products                    binding.pbHomeSellerProduct.visibility = View.VISIBLE                    binding.rvHomeSellerProduct.visibility = View.INVISIBLE                    // set loading your shop                    binding.pbHomeYourProduct.visibility = View.VISIBLE                    binding.rvHomeYourProducts.visibility = View.INVISIBLE                }                is DataState.Success -> {                    Log.i(TAG, "onViewCreated: ${it.value}")                    // set seller products                    binding.pbHomeSellerProduct.visibility = View.INVISIBLE                    binding.rvHomeSellerProduct.visibility = View.VISIBLE                    binding.rvHomeSellerProduct.layoutManager = LinearLayoutManager(requireContext() , LinearLayoutManager.HORIZONTAL , false)                    binding.rvHomeSellerProduct.adapter = ProductListAdapter(context = requireContext() ,false, it.value)                    // set your shop                    binding.pbHomeYourProduct.visibility = View.INVISIBLE                    binding.rvHomeYourProducts.visibility = View.VISIBLE                    binding.rvHomeYourProducts.layoutManager = StaggeredGridLayoutManager(2, StaggeredGridLayoutManager.HORIZONTAL)                    binding.rvHomeYourProducts.adapter = ProductListAdapter(context = requireContext() ,true, it.value)                }                is DataState.LocalError -> {                }            }        }    }}