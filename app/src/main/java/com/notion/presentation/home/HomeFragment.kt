package com.notion.presentation.homeimport android.os.Bundleimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport androidx.fragment.app.viewModelsimport androidx.recyclerview.widget.LinearLayoutManagerimport androidx.recyclerview.widget.StaggeredGridLayoutManagerimport com.notion.core.helper.DataStateimport com.notion.databinding.FragmentHomeBindingimport com.notion.utils.NotionFragmentimport dagger.hilt.android.AndroidEntryPoint@AndroidEntryPointclass HomeFragment : NotionFragment() {    private val TAG = "HomeFragment"    lateinit var binding : FragmentHomeBinding    val viewModel : HomeViewModel by viewModels()    override fun onCreateView(        inflater: LayoutInflater,        container: ViewGroup?,        savedInstanceState: Bundle?    ): View {        binding = FragmentHomeBinding.inflate(inflater ,container ,false)        return binding.root    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        initViewModel()    }    private fun initViewModel() {        viewModel.getProductList()        viewModel.productListLiveData.observe(viewLifecycleOwner){            when(it){                is DataState.Loading -> {                    Log.i(TAG, "onViewCreated: is loading")                    // set loading seller products                    binding.pbHomeSellerProduct.visibility = View.VISIBLE                    binding.rvHomeSellerProduct.visibility = View.INVISIBLE                    // set loading your shop                    binding.pbHomeYourProduct.visibility = View.VISIBLE                    binding.rvHomeYourProducts.visibility = View.INVISIBLE                }                is DataState.Success -> {                    Log.i(TAG, "onViewCreated: ${it.value}")                    // set seller products                    binding.pbHomeSellerProduct.visibility = View.INVISIBLE                    binding.rvHomeSellerProduct.visibility = View.VISIBLE                    binding.rvHomeSellerProduct.layoutManager = LinearLayoutManager(requireContext() , LinearLayoutManager.HORIZONTAL , false)                    binding.rvHomeSellerProduct.adapter = ProductListAdapter(context = requireContext() ,false, it.value)                    // set your shop                    binding.pbHomeYourProduct.visibility = View.INVISIBLE                    binding.rvHomeYourProducts.visibility = View.VISIBLE                    binding.rvHomeYourProducts.layoutManager = StaggeredGridLayoutManager(2, StaggeredGridLayoutManager.HORIZONTAL)                    binding.rvHomeYourProducts.adapter = ProductListAdapter(context = requireContext() ,true, it.value)                }                is DataState.LocalError -> {                }            }        }    }}