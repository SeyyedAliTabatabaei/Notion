package com.notion.presentation.homeimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.viewModelScopeimport com.notion.core.domain.Productimport com.notion.core.helper.DataStateimport com.notion.core.intractors.GetProductListimport com.notion.utils.NotionViewModelimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.delayimport kotlinx.coroutines.flow.collectLatestimport kotlinx.coroutines.launchimport javax.inject.Inject@HiltViewModelclass HomeViewModel @Inject constructor(private val getProductList: GetProductList) : NotionViewModel(){    val productListLiveData = MutableLiveData<DataState<List<Product>>>()    fun getProductList() {        viewModelScope.launch(Dispatchers.IO) {            productListLiveData.postValue(DataState.Loading)            delay(1500)            getProductList.invoke()                .collectLatest {                    productListLiveData.postValue(it)                }        }    }}