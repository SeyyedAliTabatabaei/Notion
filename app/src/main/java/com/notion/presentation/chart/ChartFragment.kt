package com.notion.presentation.chartimport android.os.Bundleimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport androidx.fragment.app.viewModelsimport androidx.viewpager2.widget.ViewPager2import com.notion.Rimport com.notion.databinding.FragmentChartBindingimport com.notion.utils.NotionFragmentimport com.notion.utils.getValueFromThemeimport dagger.hilt.android.AndroidEntryPoint@AndroidEntryPointclass ChartFragment : NotionFragment() {    lateinit var binding : FragmentChartBinding    val viewModel : ChartViewModel by viewModels()    override fun onCreateView(        inflater: LayoutInflater,        container: ViewGroup?,        savedInstanceState: Bundle?    ): View {        binding = FragmentChartBinding.inflate(inflater , container , false)        return binding.root    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        setupViewPager()        initView()    }    private fun initView() {        binding.cvChartInvestment.setOnClickListener {            selectItemTab(ItemTab.CHALLENGE)        }        binding.cvChartSaving.setOnClickListener {            selectItemTab(ItemTab.SAVING)        }        binding.cvChartGroup.setOnClickListener {            selectItemTab(ItemTab.GROUP)        }        binding.vpChart.registerOnPageChangeCallback(object : ViewPager2.OnPageChangeCallback(){            override fun onPageSelected(position: Int) {                when(position){                    0 -> selectItemTab(ItemTab.GROUP)                    1 -> selectItemTab(ItemTab.CHALLENGE)                    2 -> selectItemTab(ItemTab.SAVING)                }            }        })    }    private fun setupViewPager() {        binding.vpChart.adapter = ChartViewPagerAdapter(this)    }    private fun selectItemTab(item : ItemTab) {        when(item){            ItemTab.SAVING -> binding.vpChart.setCurrentItem(2 , true)            ItemTab.CHALLENGE -> binding.vpChart.setCurrentItem(1 , true)            ItemTab.GROUP -> binding.vpChart.setCurrentItem(0 , true)        }        val colorSelected = requireContext().getColor(R.color.white)        val colorText = getValueFromTheme(requireContext() , android.R.attr.textColor)        binding.tvChartSaving.setTextColor(if (item == ItemTab.SAVING) colorSelected else colorText)        binding.tvChartGroup.setTextColor(if (item == ItemTab.GROUP) colorSelected else colorText)        binding.tvChartInvestment.setTextColor(if (item == ItemTab.CHALLENGE) colorSelected else colorText)        binding.ivChartSaving.visibility = if (item == ItemTab.SAVING) View.VISIBLE else View.GONE        binding.ivChartInvestment.visibility = if (item == ItemTab.CHALLENGE) View.VISIBLE else View.GONE        binding.ivChartGroup.visibility = if (item == ItemTab.GROUP) View.VISIBLE else View.GONE    }    private enum class ItemTab{        GROUP , CHALLENGE , SAVING    }}